#+latex_HEADER: \usepackage{siunitx}
#+latex_HEADER: \usepackage[version=3]{mhchem}
#+latex_HEADER: \usepackage{mathrsfs}
#+latex_HEADER: \usepackage[export]{adjustbox}
#+latex_HEADER: \usepackage{pgf,tikz}
#+latex_HEADER: \usepackage{wasysym}
#+latex_HEADER: \usetikzlibrary{arrows}
#+LATEX_HEADER: \usepackage[UTF8]{ctex}
#+LaTeX_HEADER: \usepackage{appendixnumberbeamer}
#+PROPERTY: header-args :eval never-export
#+PROPERTY: header-args :noweb yes
#+sTARTUP: beamer

* 价值
  - 工具审美

    学物理的同学亟需

  - 实践性的课程：没有必要记忆，但一定要在短时间内实践
* Python for everyone -- control flow
** Why do we program?
   - Delegate repeatative tasks
   - Record what you did
*** Digital age
    - We just buy device, use devices.
      - How about we understanding devices, fixing devices and making
        devices?
      - Programming is one important step.  You build your world,
        change the world and participate in creating and nurturing of
        civilization by programming in this age.
      - If you don't know programming, someone else will design your
        world for you.
*** Not only a programmer needs to learn program
    - Not even a physicist.
    - Everyone needs to a bit of programming
      - Secretary
      - Sales champion
      - Accountant
      - Manager
      - Cab driver
** Why Python?
   - Python is a self-organized community.
** Python environment
   - Real GNU/Linux
     + Debian
     + Gentoo
   - Jupyter based
   - Windows based

   Windows based Python installation has caveats, because Python is
   developed under Unix.  Be prepared for unexpected bugs if you
   decide to use Python on windows.

   - Can't or don't want to install software on your computer? Check
     out PythonAnywhere, Trinket, Cloud9, or CodeAnywhere.

** Choose an editor
   - Emacs
     https://github.com/redguardtoo/mastering-emacs-in-one-year-guide
   - Vi
   - Others
     - Visual Studio Code
     - Atom
   Both Emacs and Vi have steep learning curves, they are not easy to
   learn.  But if you master any of them, they pays you.

   Don't use Microsoft Word or Windows Notepad, they are not for
   programs.  Because we need an editor that do plain text and
   syntactically correct.
** Playground
   https://www.py4e.com/tools/pythonauto
   
   Do we need one?  I don't think so.

** Jupyter
   - Causal way to completing classes.
** Installing Python
   + Windows
     - Not impossible.
     - No good package manager.
       - ... what is package manager?
       - pip on windows is a hack.
     - Snipping tool.
   + macOS
     - No good package manager.
       - Need extra care when using pip, easy to screw up.
   + GNU/Linux
     - steep learning curve.
     - not everything is obvious.
     - pays you back if you are committed to deal with data and
       programs: experimental physicist, data scientist, quant, etc.
       That is the main audience this course is targeting.
     - I am going to give lectures, examples, demonstrations on
       GNU/Linux with Emacs.
   + You can try them if you are brave, and you are encouraged to find
     your own work style.
** Submit screen shots
   - Needed skill for online discussion.
   - Anonymous discussion groups, piazza
     "Not good", commented by Harry
   - git classroom
     https://github.com/CS50Demo/assignment-1-introduction-to-programming-heroxbd-1
** Version control and Git
   - jiegec's lectures.

   https://cloud.tsinghua.edu.cn/d/f3f13a46ed4c4b5386f9/
** Write paragraphs of code
   - Basic programming structures
     - sequential
     - conditinoal
     - iterative
     - recursive
   - Early exit


*** Further Reading
    - A proof that all reasonable programs can be decoupled into
      combinations of the 3 constructs. ???
    - Structured program theorem
      - Goto statement considered harmful

    - https://en.wikipedia.org/wiki/Structured_programming
    - https://en.wikipedia.org/wiki/Goto#Criticism
** Expressions (including statements)
   - Reserved words.  Not used for anything else.
   - Variable
     - Case sensitive
   - Insane vs letter vs mnemonic
   - Covered in 程序设计基础
     - 设计成练习，作为 git 和 jupyterhub 的熟练练习
   - Keyword is historical
     - **
     - *
     - /
     - %
** How to debug
   - Read error message
   - type()
   - duanzi: 不要用浮点数表示钱——电影 Office Space
     银行用浮点数记账，有误差，被主角用来薅羊毛
** User input
   - 在数据分析中没什么用
** Branching
   - Python 语法的特殊之处
   - 强制缩进: 程序员编辑器非常重要
     - Tab vs space
   - Conditionals: if.. elif..  else
   - Try... except
     - Why can't it be replaced by if.. else?
** Loops and iteration
   - Computers to repetitive task human don't want to do.
   - while loop
   - for loop
   - counting in loop
   - filtering
   - 都作为习惯考察，视同学的基础压缩授课时间
** Types
   - None
** Functions
   - Reuse code

     Dont repeat yourself
   - Function with a return

     consistant with mathematical definition
   - Argument variable
   - 太简单了，引入递归
     
   通过练习保证同学们掌握
* Python for everyone -- data structure
  What python distinguishes itself from C
** String
   - length
   - indexing, slicing
   - Why index starting with 0?
     Dijkstra argument
   - string concatenation, compare with C
     - unicode string
   - in: logical operator
   - string library is a set of toolkit to use
     - dir(str): very useful tools
** 参观科学博物馆 可选
** Files
   - read text files: just use for to loop through.
   - open, close and `with` context
** List
   - List a powerful container.
   - Indexing compared to strings.
   - Append.
   - List and string combo into text parser.
** Dictionary
   - The central data structure of Python.
   - Dictionary: key-value pair
     - As opposed to List: ordered collection
   - Python itself is implemented with namespace and dictionaries.
     - What is a language namespace?
       #+BEGIN_SRC c++
         using namespace std;

         std::stdout
       #+END_SRC
   - Example: word counter.
     - get with a default counter value.
   - 2 iteration looping mode:
     #+BEGIN_SRC python
       for k,v in d.items():
     #+END_SRC
** Tuple
   - Tuple is non-mutable.
   - tuple can be used on the left-side of an assignment statement.
   - List comprehension: beauty of Python.

** 课堂教学，例子
   - 使用邮件库，文本处理
** 参考书
   - Think Python 2e
** 辅助资料
   - https://www.tutorialspoint.com/

     印度的编程样例网站，适合通过例子快速入门一项技能。

   - https://scipy-lectures.org/intro/intro.html

     由 Python 科学计算领域最资深作者亲自执笔编写。
* Learn to Program -- The Fundamentals
* 计算机科学和Python编程导论
* Linux 入门基础 - 网易云课堂
  苏勇
  https://study.163.com/course/courseLearn.htm?courseId=232007
** Linux 系统安装
   - VirtualBox
     - 针对运维工作
       - 软件保守，不适合学术
       - 命令行为主，与科学计算很类似
     - 运行在 macOS
   - 使用英语环境
     - 中文的高质量资料很少，中文的社区非常薄弱且小众
     - 英语是程序的天然语言，对科技表达更丰富
     - 世界目前的约定，各国科学家都在通过英语交流
   - 如果立志建设中文社区，请先通过英语学习成为高手
** 命令行界面
   - 与计算机交互的精髓
     - 比随意点选更有助于可复现性
   - 更方便地操作远程的计算资源
** GNOME
   - 有助于渐进地加入命令行
   - 图形界面未必能真切表达人类的意图
   - 图形界面的开发更耗时费力，“易用性”是以开发难度为代价
     - 科学研究更关注本质
** CLI shell, bash / zsh
   - shell 相对于 kernel，在 kernel 之外
   - 用户通过 shell 把命令传给 kernel
   - bash 的提示
   - 命令、选项、参数
     - hostname
     - ls
     - uname
     - clear
     - id
     - passwd
   - 参数：短线、双线，GNU 约定
   - Shell 后台进程
   - Tab 自动补全
     - unique
   - zsh 可以补全参数
   - 上下方向查找历史，Ctrl-r 搜索命令。
     - emacs 快捷键约定
   - ESC-. 上一个命令的选项
   - *, ?, [0-9], {}
   - Ctrl-Z 挂起
     - jobs
     - bg
     - fg
   - 其它命令
     date, uptime, head, tail, less, cat, lspci, zip, tar, find
** 编辑器 vi, emacs
   - Unix 一切都是文本，因为一切皆可用文本编辑器修改。
** 文件系统
   - 目录结构，当前工作目录
   - "."开头的是隐藏文件
   - touch 更新文件时间，不存在则先创建
   - ls -d: list directories themselves, not their contents
   - file 类型
   - 绝对路径、相对路径
     - Linuxcast 图
   - . .. ~ -

   不仔细讲，只做练习
** 文件操作
   - cp, mv, rm, mkdir, rmdir

   不仔细讲，只做练习
** 系统目录 FHS
   - /bin, /sbin
   - /boot
   - /etc
     文本的配置文件
   - /tmp
     临时目录

** 硬盘在系统中的表示
   - /dev/sda, /dev/nvme0
* 实验楼 - Linux 基础入门（新版）
  - 交互式地学习
  - 文件的基本操作
* GEANT4
  https://groups.lal.in2p3.fr/ED-geant4/ttt/program/

  - 从 Python 起，非常友好的入门。注重可视化。
  - Structure of Geant
    - Run
    - Event
    - Track
    - Step
    - 每天一种，一个可视化的方法
  - Run an application
  - Collect information
  - 只做入门教学，教给同学深入学习的方法
** Introduction
** Geometry
** Primary Paricles
** Physics
** Scoring
* GitHub Classroom
  Use as official homework platform.
** Assignments
   - starter code
   - generate invitation link and distribute
   - Individual assignment, review by pull request
** Skills for the future
   - Teamwork and collaboration
   - Popular industry tools
   - Project management
   - More github features is needed
   - 2-2.5 month to familiar with Github
* 第一周
  :PROPERTIES:
  :EXPORT_FILE_NAME: w1
  :EXPORT_BEAMER_HEADER+: \title{实验物理的大数据方法}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2019-07-01 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: crane
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 自我介绍
** 课程介绍 科学方法
** 课程内容
   - 什么是“实验物理”
   - 什么是“大数据方法”
** 课程评估 分数标准
** 平时作业
** 大作业
** 大作业 课赛结合 中微子实验数据分析
** 大作业 Tola 微波干涉阵信源定位
** 大作业 二维金属材料的 Fermi 面测量
** 教学团队
