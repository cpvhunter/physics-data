#+latex_HEADER: \usepackage{siunitx}
#+latex_HEADER: \usepackage[version=3]{mhchem}
#+latex_HEADER: \usepackage{mathrsfs}
#+latex_HEADER: \usepackage[export]{adjustbox}
#+latex_HEADER: \usepackage{pgf,tikz}
#+latex_HEADER: \usepackage{wasysym}
#+latex_HEADER: \usetikzlibrary{arrows}
#+LATEX_HEADER: \usepackage[UTF8]{ctex}
#+LaTeX_HEADER: \usepackage{appendixnumberbeamer}
#+PROPERTY: header-args :eval never-export
#+PROPERTY: header-args :noweb yes
#+sTARTUP: beamer

* 价值
  - 工具审美

    学物理的同学亟需

  - 实践性的课程：没有必要记忆，但一定要在短时间内实践
* Python for everyone -- control flow
** Why do we program?
   - Delegate repeatative tasks
   - Record what you did
*** Digital age
    - We just buy device, use devices.
      - How about we understanding devices, fixing devices and making
        devices?
      - Programming is one important step.  You build your world,
        change the world and participate in creating and nurturing of
        civilization by programming in this age.
      - If you don't know programming, someone else will design your
        world for you.
*** Not only a programmer needs to learn program
    - Not even a physicist.
    - Everyone needs to a bit of programming
      - Secretary
      - Sales champion
      - Accountant
      - Manager
      - Cab driver
** Why Python?
   - Python is a self-organized community.
** Python environment
   - Real GNU/Linux
     + Debian
     + Gentoo
   - Jupyter based
   - Windows based

   Windows based Python installation has caveats, because Python is
   developed under Unix.  Be prepared for unexpected bugs if you
   decide to use Python on windows.

   - Can't or don't want to install software on your computer? Check
     out PythonAnywhere, Trinket, Cloud9, or CodeAnywhere.

** Choose an editor
   - Emacs
     https://github.com/redguardtoo/mastering-emacs-in-one-year-guide
   - Vi
   - Others
     - Visual Studio Code
     - Atom
   Both Emacs and Vi have steep learning curves, they are not easy to
   learn.  But if you master any of them, they pays you.

   Don't use Microsoft Word or Windows Notepad, they are not for
   programs.  Because we need an editor that do plain text and
   syntactically correct.
** Playground
   https://www.py4e.com/tools/pythonauto
   
   Do we need one?  I don't think so.

** Jupyter
   - Causal way to completing classes.
** Installing Python
   + Windows
     - Not impossible.
     - No good package manager.
       - ... what is package manager?
       - pip on windows is a hack.
     - Snipping tool.
   + macOS
     - No good package manager.
       - Need extra care when using pip, easy to screw up.
   + GNU/Linux
     - steep learning curve.
     - not everything is obvious.
     - pays you back if you are committed to deal with data and
       programs: experimental physicist, data scientist, quant, etc.
       That is the main audience this course is targeting.
     - I am going to give lectures, examples, demonstrations on
       GNU/Linux with Emacs.
   + You can try them if you are brave, and you are encouraged to find
     your own work style.
** Submit screen shots
   - Needed skill for online discussion.
   - Anonymous discussion groups, piazza
     "Not good", commented by Harry
   - git classroom
     https://github.com/CS50Demo/assignment-1-introduction-to-programming-heroxbd-1
** Version control and Git
   - jiegec's lectures.

   https://cloud.tsinghua.edu.cn/d/f3f13a46ed4c4b5386f9/
** Write paragraphs of code
   - Basic programming structures
     - sequential
     - conditinoal
     - iterative
     - recursive
   - Early exit


*** Further Reading
    - A proof that all reasonable programs can be decoupled into
      combinations of the 3 constructs. ???
    - Structured program theorem
      - Goto statement considered harmful

    - https://en.wikipedia.org/wiki/Structured_programming
    - https://en.wikipedia.org/wiki/Goto#Criticism
** Expressions (including statements)
   - Reserved words.  Not used for anything else.
   - Variable
     - Case sensitive
   - Insane vs letter vs mnemonic
   - Covered in 程序设计基础
     - 设计成练习，作为 git 和 jupyterhub 的熟练练习
   - Keyword is historical
     - **
     - *
     - /
     - %
** How to debug
   - Read error message
   - type()
   - duanzi: 不要用浮点数表示钱——电影 Office Space
     银行用浮点数记账，有误差，被主角用来薅羊毛
** User input
   - 在数据分析中没什么用
** Branching
   - Python 语法的特殊之处
   - 强制缩进: 程序员编辑器非常重要
     - Tab vs space
   - Conditionals: if.. elif..  else
   - Try... except
     - Why can't it be replaced by if.. else?
** Loops and iteration
   - Computers to repetitive task human don't want to do.
   - while loop
   - for loop
   - counting in loop
   - filtering
   - 都作为习惯考察，视同学的基础压缩授课时间
** Types
   - None
** Functions
   - Reuse code

     Dont repeat yourself
   - Function with a return

     consistant with mathematical definition
   - Argument variable
   - 太简单了，引入递归
     
   通过练习保证同学们掌握
* Python for everyone -- data structure
  What python distinguishes itself from C
** String
   - length
   - indexing, slicing
   - Why index starting with 0?
     Dijkstra argument
   - string concatenation, compare with C
     - unicode string
   - in: logical operator
   - string library is a set of toolkit to use
     - dir(str): very useful tools
** 参观科学博物馆 可选
** Files
   - read text files: just use for to loop through.
   - open, close and `with` context
** List
   - List a powerful container.
   - Indexing compared to strings.
   - Append.
   - List and string combo into text parser.
** Dictionary
   - The central data structure of Python.
   - Dictionary: key-value pair
     - As opposed to List: ordered collection
   - Python itself is implemented with namespace and dictionaries.
     - What is a language namespace?
       #+BEGIN_SRC c++
         using namespace std;

         std::stdout
       #+END_SRC
   - Example: word counter.
     - get with a default counter value.
   - 2 iteration looping mode:
     #+BEGIN_SRC python
       for k,v in d.items():
     #+END_SRC
** Tuple
   - Tuple is non-mutable.
   - tuple can be used on the left-side of an assignment statement.
   - List comprehension: beauty of Python.

** 课堂教学，例子
   - 使用邮件库，文本处理
** 参考书
   - Think Python 2e
** 辅助资料
   - https://www.tutorialspoint.com/

     印度的编程样例网站，适合通过例子快速入门一项技能。

   - https://scipy-lectures.org/intro/intro.html

     由 Python 科学计算领域最资深作者亲自执笔编写。
* 用 Python 玩转数据
  http://www.icourse163.org/learn/NJU-1001571005
** Python 入门介绍
   - 主线是 Python 的广泛应用
   - 交互模式和文件执行模式
   - 缩进
   - Python 中的常量
     - stu-name 不是合法的变量名
   - 屏幕书写很适合制作 MOOC
   - 讲课很口语化，在 MOOC 上更有亲和力
* Learn to Program -- The Fundamentals
* 计算机科学和Python编程导论
* Linux 入门基础 - 网易云课堂
  苏勇
  https://study.163.com/course/courseLearn.htm?courseId=232007
** Linux 系统安装
   - VirtualBox
     - 针对运维工作
       - 软件保守，不适合学术
       - 命令行为主，与科学计算很类似
     - 运行在 macOS
   - 使用英语环境
     - 中文的高质量资料很少，中文的社区非常薄弱且小众
     - 英语是程序的天然语言，对科技表达更丰富
     - 世界目前的约定，各国科学家都在通过英语交流
   - 如果立志建设中文社区，请先通过英语学习成为高手
** 命令行界面
   - 与计算机交互的精髓
     - 比随意点选更有助于可复现性
   - 更方便地操作远程的计算资源
** GNOME
   - 有助于渐进地加入命令行
   - 图形界面未必能真切表达人类的意图
   - 图形界面的开发更耗时费力，“易用性”是以开发难度为代价
     - 科学研究更关注本质
** CLI shell, bash / zsh
   - shell 相对于 kernel，在 kernel 之外
   - 用户通过 shell 把命令传给 kernel
   - bash 的提示
   - 命令、选项、参数
     - hostname
     - ls
     - uname
     - clear
     - id
     - passwd
   - 参数：短线、双线，GNU 约定
   - Shell 后台进程
   - Tab 自动补全
     - unique
   - zsh 可以补全参数
   - 上下方向查找历史，Ctrl-r 搜索命令。
     - emacs 快捷键约定
   - ESC-. 上一个命令的选项
   - *, ?, [0-9], {}
   - Ctrl-Z 挂起
     - jobs
     - bg
     - fg
   - 其它命令
     date, uptime, head, tail, less, cat, lspci, zip, tar, find
** 编辑器 vi, emacs
   - Unix 一切都是文本，因为一切皆可用文本编辑器修改。
** 文件系统
   - 目录结构，当前工作目录
   - "."开头的是隐藏文件
   - touch 更新文件时间，不存在则先创建
   - ls -d: list directories themselves, not their contents
   - file 类型
   - 绝对路径、相对路径
     - Linuxcast 图
   - . .. ~ -

   不仔细讲，只做练习
** 文件操作
   - cp, mv, rm, mkdir, rmdir

   不仔细讲，只做练习
** 系统目录 FHS
   - /bin, /sbin
   - /boot
   - /etc
     文本的配置文件
   - /tmp
     临时目录

** 硬盘在系统中的表示
   - /dev/sda, /dev/nvme0
* 实验楼 - Linux 基础入门（新版）
  - 交互式地学习
  - 文件的基本操作
* GEANT4
  https://groups.lal.in2p3.fr/ED-geant4/ttt/program/

  - 从 Python 起，非常友好的入门。注重可视化。
  - Structure of Geant
    - Run
    - Event
    - Track
    - Step
    - 每天一种，一个可视化的方法
  - Run an application
  - Collect information
  - 只做入门教学，教给同学深入学习的方法
** Introduction
** Geometry
** Primary Paricles
** Physics
** Scoring
* GitHub Classroom
  Use as official homework platform.
** Assignments
   - starter code
   - generate invitation link and distribute
   - Individual assignment, review by pull request
** Skills for the future
   - Teamwork and collaboration
   - Popular industry tools
   - Project management
   - More github features is needed
   - 2-2.5 month to familiar with Github
* 平时作业
  - 细化，标准输入输出
* Berkeley Course
  Data science and Bayesian statistics for physical sciences

  https://data.berkeley.edu/news/new-physics-data-science-course

** Goal
   Modern tools in data science and data analysis in physics.
   
** Audience
   Upper division undergraduates.

** Topic
   - Theoretical, practical, their most common applications in
     physical sciences.
** Grades
   30% projects, 40% homeworks, 30% class participation. 
** Table of contents
   - Numerical integration
   - Introduction to probability and Bayesian inference
   - More on Bayesian inference and intro to data modeling
   - Linear Algebra
   - Information theory
   - Nonlinear equations and 1-d optimization
   - Optimization in many dimensions
   - Monte Carlo methods for integration and posteriors
   - More advanced Bayesian analysis
   - Variational approximations
   - Interpolation and extrapolation of data
   - Fourier methods
   - Ordinary and partial differential equations
   - Classification and inference with machine learning
** Programming environment
   - Jupyter notebook

** Planck 
   A series of tasks
   
   Use measurement of Planck satellite power spectrum to determine
   cosmological parameters.

   - Optimization, find MAP/MLE best fit parameters
   - Determine covariances of all parameters using Laplace approximation.
   - Fisher matrix experiment design predictions.
   - analyze MCMC chains burn-in phase, Gelman-Rubin statistics, and chain
     correlations.
   - Plot 1-d and 2-d distributions and compare them
     to MAP/Laplace approximation.
   - Change one parameter and use importance sampling to produce new
     posteriors.

** LIGO
   Use matched filtering methods and FFT to analyze first LIGO event
   and show it has detected gravitational waves.

** Machine learning on galaxies
   - train the ML algorithms for regression
   - test the training algorithms
   - try KNN, gaussian processes, linear and quadratic regression,
     support vector machines, neural networks, random forest...
   - classification: use galaxy zoo galaxy
     morphology (spirals ellipticals, irregulars...) training dat.
   - Use photometry first, then add image information and observe how
     the accuracy improves.
** grader
   https://okpy.org/
* 公告时间
  1. 小助教申请 7月1日24点截止
  2. 7月2日上午
  3. 大作业替代的提出 7月7日24点载止
* 第一周
  :PROPERTIES:
  :EXPORT_FILE_NAME: w1
  :EXPORT_BEAMER_HEADER+: \title{实验物理的大数据方法}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2019-07-01 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: crane
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 自我介绍
   - 2005-2009 :: 在数理基科学习
   - 2009-2018 :: 在日本神冈地下实验室中微子和暗物质学习，研究
   - 2018-至今 :: 在工程物理系近代物理研究所任教

   - 主要工作：锦屏中微子实验
   - 合作研究
     1. 日本超级神冈实验
     2. 江门中微子实验
     3. 日本XMASS暗物质实验
   - 研究兴趣：中微子振荡、核子衰变、地球中微子
   - 爱好：大数据分析、高性能计算、运维开发(业余)

** 释义
*** 什么是“实验物理”                                         :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:
    
    - 一切费电的物理！

      “理论学家费纸，实验学家费电，理论实验物理学家费米”

      - 欧洲核子中心(CERN)一年用电约 \SI{1.3}{\tera\watt\hour}。

        北京东城区西城区2016年用电总量 \SI{10.1}{\tera\watt\hour}，人口 200 万。

    - 观察物理现象的学科
      - 控制物理现象发生的环境？是 \to “实验”(狭义)；否 \to “观测”。
      - 实验物理的目标：发现物理规律，包括测量物理常数。
        
        从取得的数据出发，进行统计推断，证伪物理规律的假设。

*** 什么是“大数据”
    
    是一个商业概念，“大”是相对的，大数据是指无法用一台计算机处理的数据。

** 大物理实验与大数据

   - 大型物理实验，产生大数据，要求多台计算机协同工作：分布式计算。
   - 跨地理的分布式计算称为“网格”(grid)，在早期促进和影响了互联网的发
     展。
     
     - FAST 天眼：每年@@latex:$\SI{\sim 1}{\peta B} = \SI{1e15}{B}$@@。

   - CERN 在 90 年代决定使用 Intel 民用计算机组成的集群来完成 LHC 的计
     算任务，是个人电脑级硬件集群成为科学计算主流的标志。

     - Intel 计算集群是当今大数据工业界的主流配置。

   - 近年来，大数据方法独立于实验物理，被工业界广泛采用，与神经网络结
     合，催生了“深度神经网络”，或“深度学习”。

     - 一系列新方法被应用到实验物理。
** 课程内容
   - 以实验物理为主题，学习大数据方法的基础。
     1. 理解数据的科学精神，从一开始养成良好的科研习惯
     2. 掌握典型工具 Git, Python 和常用命令行工具，适应自学
     3. 培养工具的品位，针对具体场景选择合适的工具

*** 计划安排
    - 实验物理的大数据方法(1) 6A211
      - 第一周 :: Git 入门，Python 入门
      - 第二周 :: Python 科学计算与可视化
    - 实验物理的大数据方法(2) 6A207
      - 第三周 :: 基于命令行的数据处理整合
      - 第四周 :: Python 数据处理高级工具
    - 上课：周一至周四，三四大节
    - 答疑：周五三四大节，地点与上课教室一致
      - Office Hour: 周一至周五晚7点至9点，刘卿楼804
      - 网络学堂“课程答疑”板块
   
** 数据分析的指导原则

   #+attr_beamer: :overlay <+->
   - “复现”原则 :: 以人类语言和计算机语言的形式，详细记录每一步计算。

      这是科学的基本精神，与可证伪性一起，是区分科学与伪科学的标志。

   - “透明”原则 :: 每一步的数据都应尽量可以被人类直接阅读，比如 JSON, CSV。如果不得
      不用二进制模式，一定是使用最普遍最开放的格式，比如 HDF5。

   - “一次”原则 :: Single Point of Truth, Don't Repeat Yourself. 不可在分析做任何
      重复，任何有意义的信息都应该被共享。

   - “最佳工具”原则 :: 尽量使用高级语言和语法糖，为每个子任务选择合适的工具。只有在性能
      分析之后，才在必要时使用低级语言进行性能加速。

      最佳工具会随时间变化，因此课程名不是

      +Python 数据处理与科学计算+

** 课程评估 分数标准
   按百分制记分，录入成绩时转换为等级。

*** 平时作业
    - 占 70% 成绩，覆盖课堂学习的知识要点，以 Github Classroom 形式组
      织。
      - 平时作业中的 80% 为黑盒测试，20% 为白盒测试。
      - 白盒测试重点考察
        1. Git commit 的内容必须有意义。
        2. 程序书写规范

*** 大作业
    - 占 30% 成绩，取材自实验物理不同方向的真实场景。也可以由同学自行
      提出。
      - 分两个阶段，对应前两周和后两周。
** 大作业

   - 课赛结合 中微子实验数据分析
     - 分析中微子实验中，光电倍增管采集的光电子。
     - https://ghost-hunter.net9.org/
   - Tola 微波干涉阵信源定位
     - 通过微波干涉阵的信号，对信源进行定位。
   - 二维金属材料的 Fermi 面测量
     - 通过扫描隧道显微镜的数据，分析二维金属的 Fermi 面。

*** 自定义                                                   :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:

    - 如果有同学希望采用其它学科方向的大作业，请提出申请给续本达<orv@tsinghua.edu.cn>
      1. 问题描述和学科背景
      2. 数据的输入和输出的定义与格式
      3. 数据分析结果的评价标准
** 参考资料

   - Allen Downey, Think Python 2e
   - Fernando Perez et al., Scipy Lecture Notes
   - Jeroen Janssens, Data Science at the Command Line
   - David MacKay, Information Theory, Inference, and Learning Algorithms

*** 辅助资料
    - Eric S. Raymond, The Art of Unix Programming
      
      以道家思想剖析了设计的优美和永恒， _透明_ 原则源于此。

    - https://www.tutorialspoint.com/

      印度的编程样例网站，适合通过例子快速入门一项技能。

    - http://py4e.com/

      Python for everybody，全球知名的 Python 教程，新手友好。

    - 苏勇, [[https://study.163.com/course/courseLearn.htm?courseId=232007][Linux 入门基础 - 网易云课堂]]
      
      通过 GNU/Linux 讲授 POSIX 环境基础。内容稍旧，思想不变。

** 教学团队
   - 教师 :: 续本达
   - 助教 :: 陈嘉杰、张爱强、陈晟祺
   - 顾问 :: 郝镇齐、唐如麟、张宗煜、付祈安、高一川、刘晓义
   - 小助教 :: 已经有4位同学自荐，请大家继续踊跃报名，请发邮件至 续本达
            <orv@tsinghua.edu.cn>

     1. 已修过的《程序设计基础》或类似课程的课程号、任课教师与成绩
     2. 是否有中学生信息学竞赛 (OI) 、大学生 ACM 竞赛或类似竞赛的参加经历
     3. 小助教宣言
** Python
   
   #+attr_beamer: :overlay <+->
   - Python 是一门“解释型语言”，相对于“编译型语言”更易调试。
   - Python 的语法风格简明，即使对外行也易读。
     - 书写效率高，快速写出不错的程序。
   - Python 可以直接调用 Fortran, C/C++, R 等语言库，因此也叫“胶水”语
     言，即把不同的程序粘合在一起。
     - 易于与已有工具整合。
     - 促进团队分工，协作。
     - 大大丰富了 Python 生态系统的功能，进一步优化程序运行效率。
     - 符合 _最佳工具_ 原则。
   - Python 是一个通用语言，不仅在科学研究，在生活中的方方面面都会有用。

   - 在科学计算领域得到广泛欢迎和采用。

     https://www.python.org/
** POSIX 环境
   POSIX 是 /Portable Operating System Interface/ 的缩写，是关于计算机
   操作系统的国际标准。它规定了操作系统的基本工具和程序接口。

   - 科学研究中时间和空间跨度都很大，需要使用公开的国际标准化接口，才
     能满足 _复现_ ， _透明_ 和 _最佳工具_ 原则。

*** 满足 POSIX 标准的操作系统
   - GNU/Linux
   - Apple macOS
   - 其它类 Unix 系统
   - Microsoft Windows 本身不满足，但可以使用以下扩展:
     1. Cygwin, MinGW
     2. Windows Subsystem for Linux (WSL)
     3. 使用虚拟机安装 GNU/Linux

** 实践：安装 Python 3 和 POSIX 环境
   - GNU/Linux 用户 :: 工具都已齐备。请帮助周围的同学，并自荐成为小助教
   - Apple macOS 用户 :: Macports, Gentoo Prefix, Homebrew 皆可
   - Microsoft Windows 用户 :: 请注意不要使用带空格的或中文用户名。按
        照以下顺序尝试，直到成功获得 Python 和 POSIX 环境：
     1. Windows Subsystem for Linux (WSL)
     2. MinGW, Cygwin
     3. 使用虚拟机安装 GNU/Linux

** 版本控制
   - “我和同学合写文章，结果他是在昨天的版本上改的！我还得重改！”
*** 发展历史

    #+attr_beamer: :overlay <+->
    - 石器时代 :: =实验报告-v1=, =实验报告-v2=, =实验报告-v2.2=, =实验报告-v2.2-续本达更新20190629= ……
    - 青铜时代 :: diff, patch 文本差分算法
      #+BEGIN_SRC dot :file ./diff-patch.pdf :cmdline -Kdot -Tpdf
        digraph dataset {
        bgcolor="#ffffff00"

        { rank = same; B D1 }
        { rank = same; D2 M }

        B [label = "公共版本"]
        D1 [label = "差分1"]
        D2 [label = "差分2"]
        M [label = "合并"]

        B -> D1 [label = "更新第二章"]
        B -> D2 [label = "修改第一章"]

        D1 -> M [label = "修改第一章"]
        D2 -> M [label = "更新第二章"]
        }
      #+END_SRC

      #+Attr_LaTeX: :height 0.35\textheight
      #+RESULTS:
      [[file:./diff-patch.pdf]]
    - 铁器时代 :: 版本控制服务：CVS，SVN
    - 现代 :: 分布式版本控制：Git，Mercurial
** Git 案例
   “我上周写的程序被不小心覆盖掉了！无法找回之前的版本。”

   #+attr_beamer: :overlay <+->
   - 小强同学经过认真思考和试验，发明了一种巧妙的解决问题方法，并写成
     程序，经验证效果拔群。
     - 小强非常振奋，他把成果记了下来，并继续重构并优化解法。
     - 两个星期之后，他的优化并没有达到预期效果，反而使结果变差。
     - 令他更为懊恼的是，他已经无法达到自己两周之前的高度了，因为忘记
       了改之前的程序是怎么写的。
   - _复现_ 原则被破坏。
   - =解法-20190530.backup= ， =解法-20190608= ？重复存储， _一次_ 原则被破坏。
   - 使用 Git，养成良好的习惯，就能解决以上问题。
   - Git 由 Linus Torvalds 发明，用来支撑全世界 5000 名以上 Linux 操作
     系统内核开发者的协作。是我们的 _最佳工具_ 。
** Git 基础
   [[./fig/pro-git_snapshots.png]]
   - 在任意时间我们都可以选择给工作区进行一次“快照”。
   - 相邻快照之间，是代表文件改动的差分量。
   - 例子：讲义
** 例子：撰写讲义
   [[./fig/tig-example.png]]
   - 查看每次提交的改动。
** Git 三种状态
   - 已提交（committed） :: 改动安全保存在数据库中
   - 已修改（modified） :: 自上一次提交，有文件被修改
   - 已暂存（staged） :: 已修改的文件被作了标记，将被包含在下一轮提交中

      [[./fig/git-modes.png]]              
** Git 仓库间通信
   #+Attr_LaTeX: :height 0.7\textheight
   [[./fig/git-distributed.png]]

   - 建议：通过 SSH (secure shell) 通信。

** Git 基本命令
   #+attr_beamer: :overlay <+->
   - diff :: 查看改动
   - status :: 查看状态
   - add :: 添加文件
   - commit :: 提交
   - log :: 查看历史
   - pull :: 从远程下载
   - push :: 推送到远程

*** 内建手册 =man=                                           :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:

    命令的具体含义可以参考 =man= 命令，例如，
   
    #+BEGIN_EXAMPLE
$ man git add
    #+END_EXAMPLE
** 作业：Git 练习
   #+attr_beamer: :overlay <+->
   - [[https://classroom.github.com/a/gxRgrL8_]]
     - 点击后会自动创建你的 Git 仓库

   - 设置本地到 Github 的访问权限
     - 生成 SSH 密钥对
     - 上传到 Github

   - 同步你的 Git 仓库，输入你的基本信息
     #+BEGIN_EXAMPLE
我的姓名：
我的学号：
我的 Python 版本信息：

课程感言：
     #+END_EXAMPLE
   - 查看修改 (diff)
   - 预估得分
   - 添加修改 (add)
   - 提交 (commit)
   - 推送 (push)
** 练习（不记分）：查看备课历史

   - https://github.com/heroxbd/physics-data

     #+BEGIN_SRC bash
git clone git@github.com:heroxbd/physics-data.git
git log -p
     #+END_SRC
** 今日新闻 G20
   #+Attr_LaTeX: :height 0.5\textheight
   [[./fig/news-G20-2019.jpg]]

   - 国家主席习近平6月29日同美国总统特朗普在大阪举行会晤，就当前中美经贸
     摩擦以及共同关心的国际和地区问题深入交换意见……

   - 特朗普政府的政策对中美关系产生深远影响。同时，2016年美国大选中的
     一次重要转折，对特朗普的竞选影响极大。

* 第一周第二天
  :PROPERTIES:
  :EXPORT_FILE_NAME: w1-2
  :EXPORT_BEAMER_HEADER+: \title{实验物理的大数据方法}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2019-07-02 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: crane
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 概论复习
   四个原则： _复现_ _透明_ _一次_ _最佳工具_

** 命令环境
   - 基本的命令
     - ls :: list structure, 列出当前路径中的文件
     - cd :: change directory, 改变当前路径
     - sudo :: 使用最高权限执行操作
     - apt :: Advanced Package Tool 软件管理器
     - apt-get :: 软件管理下载器，与 apt 功能基本一致
     - vim :: 文本编辑器
     - nano :: 文件编辑器
   - 每个命令都完成一件确定的事

     Do one thing, do it right.

   - 命令的组合有无限可能

     作者无法预计用户如何使用他的工具

     - 组合的可能性太多，入门比较难
     - 一旦入门威力巨大

** 命令环境自学教程
   - 苏勇, [[https://study.163.com/course/courseLearn.htm?courseId=232007][Linux 入门基础 - 网易云课堂]]
      
     通过 GNU/Linux 讲授 POSIX 环境基础。内容稍旧，思想不变。
   
** 文本编辑器
   [[./fig/gedit.png]]

** 文本编辑器(复古)
   [[./fig/nano.png]]

   - 没有菜单，只有快捷键
** Git 三种状态
   - 已提交（committed） :: 改动安全保存在数据库中
   - 已修改（modified） :: 自上一次提交，有文件被修改
   - 已暂存（staged） :: 已修改的文件被作了标记，将被包含在下一轮提交中

      [[./fig/git-modes.png]]              
** Git 同步
   #+Attr_LaTeX: :height 0.7\textheight
   [[./fig/git-distributed.png]]

   - 通过 SSH (secure shell) 通信。

** 练习（不记分）：查看备课历史

   - https://github.com/heroxbd/physics-data

     #+BEGIN_SRC bash
git clone git@github.com:heroxbd/physics-data.git
git log -p
     #+END_SRC

** 内容较多未成体系
   - 犹如造房子的准备材料阶段。
   - 马上会用到的，逻辑：
     - Github 是知名的协作平台，越来越多科研成果在 Github 或类似平台上发布
     - 交作业需要使用 Github，在作业中体会日常工作流程
     - Git 的客户端中，只有命令行是最可靠的。
     - Git 命令运行依赖于 POSIX 环境。
     - 大家一起安装配置了 POSIX 环境。
     - 在 POSIX 环境需要进行文本编辑，用到了 =nano= 。

       WSL，MacOS，GNU/Linux，远程 SSH 账户
   - 一般工作中， =nano= 常用作应急编辑器，有更高级的编辑器可用。
     - VSCode
     - Emacs
     - Vim
     - 其它

** 同学的一些反馈
*** 老师操作太快，自学效率高
    - 自己弄一遍好像也没有很难。希望老师操作的时候慢一点，讲讲每一步是做
      什么，其它部分可以快一点。

    - 感觉后面的演示有点快
*** 与之前的课程差距很大                                     :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:
    课堂纪律有些乱，课程内容与之前学习的程设课程差别较大。
*** 需要更多的帮助
    感觉老师高估了大家对计算机的熟悉程度，好多同学只会使用图形化界面，
    不习惯命令行界面，需要保姆式教学，熟悉命令行这一部分应该尽可能详细
    且留充足的时间，安排足够的助教轮次帮助同学绕开大坑。

** 我的经历 2002年
   《工具的狂热——我的 Linux 历程》
*** 安装系统   
    安装画面相当帅，但帅过之后我发现自己完完全全不熟悉这东西，而且那界
    面的中文还不知道所云，调成英文我又不大认识（当时痛下决心一定学好英
    语）。---- 就这样，装了一遍两遍三遍，万物遍，从中午搞到晚上，一个
    问题一个问题在克服，最后终于每次安装失败都稳定在同一个错误上，抱着
    英汉词典查出来那个很长很长的提示好像是在说第三张盘的某某包安装错误。
*** 不知道 Password                                          :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:
    这一玩我傻了，什么 login: 啊，什么 password: 啊，我什么都不知道的
    咧（事后诸葛亮，安装不完全只要 root 不需要密码就能进的）。已经半夜
    了，我撅在床上这个憋屈啊，搞了大半天连个系统是啥样的都不知道，被一
    个 password 直接挡了回来。
** 我的经历 2003年
*** 过了一年还是不知道 Password
    但试机的时候我就木了，同样一个黑乎乎的屏幕上输 "Login:"和
    "Password:" 之后就是一圈怪怪的提示符，我把记得的 DOS 命令全部试了
    一遍，发现只有 "dir"和"cd" 可以用，就一个目录一个目录地探索起来。
    这时我前排的一个抖腿男已经是手抚键盘上下翻飞了，那屏幕蒺藜咕噜地翻
    了一页又一页，花花绿绿的不知道什么东西。我再一斜眼，左前方的小姑娘
    已经开了一个蓝蓝的 Pascal 界面正在写测试程序呢，我这才想到重要是得
    知道 pascal 在哪啊，不好意思地问了旁边的队友，才在 Free Pascal 上
    一点点搞起来，真别扭，一点状态都没有。队友大师兄指点我几下就去帮别
    人了，良久回来嫩嫩地说“我帮小妹妹调好了一个程序，小妹妹说我是牛人”。
    听得我更没心情编程了，就又 "cd" "dir" 地胡乱扯了起来。不一会儿大师
    兄开始玩 /usr/games/banner ，我也跟着弄了几下，心里飘飘忽忽一点底
    都没有。

*** URL                                                     :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

    http://jkparadise.space/home.php?mod=space&uid=13&do=blog&id=196    
** 今日新闻 G20
   #+Attr_LaTeX: :height 0.5\textheight
   [[./fig/news-G20-2019.jpg]]

   - 国家主席习近平6月29日同美国总统特朗普在大阪举行会晤，就当前中美经贸
     摩擦以及共同关心的国际和地区问题深入交换意见……

   - 特朗普政府的政策对中美关系产生深远影响。同时，2016年美国大选中的
     一次重要转折，对特朗普的竞选影响极大。
** 邮件数据集
   - 很多往来邮件
     https://cloud.tsinghua.edu.cn/d/f8ad70a64cc6462a89fd/
   - 邮件的结构 实例展示
* 第二周第三天
  :PROPERTIES:
  :EXPORT_FILE_NAME: w2-3
  :EXPORT_BEAMER_HEADER+: \title{实验物理的大数据方法}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2019-07-10 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: crane
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 柏拉图世界观
   [[./fig/SCI.png]]

   - 数学世界独立存在，由它推演出物理世界
** 实验物理
   #+Attr_LaTeX: :height 0.6\textheight
   [[./fig/SCI.png]]
   - 实验仪器是从物理世界到人类的一条信息通道
     - 实验仪器的分辨率有限，我们在进行有损通信
   
** 举个例子
   [[./fig/reconstruction.png]]
   - 建立模型解释物理世界发生的现象，通过统计方法反推本质。
** 大作业安排
   - 2019.7.11 - 2019.7.26
     - 模拟实验测量
   - 2019.7.22 - 2019.8.11
     - 分析实验测量
*** 上课时间变动 :B_alertblock:
    :PROPERTIES:
    :BEAMER_env: alertblock
    :END:
    - 2019.7.17 停上，在 6A207 答疑，改到 2019.9.19 上课。
      - 物理系同学搬宿舍
** 实验测量的模拟
   - 输入 :: 物理对象的信息，随机因素的概率分布
   - 输出 :: 多阶段，最终输出为模拟的实验测量原始数据
   - 采分 :: 各阶段的实现，最终输出的正确性，作业报告
** TOLA 射电干涉的模拟
   #+BEGIN_SRC dot :file ./TOLA-pipeline.pdf :cmdline -Kdot -Tpdf
     digraph dataset {
     bgcolor="#ffffff00"

     S [label = "i (1..N) 射电源的\n 方向、频率、振幅", shape=box]
     B [label = "j (1..M) 基站\n 位置", shape=box]
     P [label = "i 射电源在 j 基站上\n诱导的信号"]
     Q [label = "j 基站上\n接收的总信号"]

     S -> P
     B -> P
     P -> Q[label="线性相加"]

     O [label = "时钟偏移的\n高斯分布标准差", shape=box]
     F [label = "j 基站的时钟偏移", shape=box]
     O -> F [label = "抽样"]
     F -> Q
     }
   #+END_SRC

   #+RESULTS:
   #+Attr_LaTeX: :height 0.7\textheight
   [[file:./TOLA-pipeline.pdf]]
   
** 二维金属等能面测量的模拟

   #+BEGIN_SRC dot :file ./isoenergy-pipeline.pdf :cmdline -Kdot -Tpdf
     digraph dataset {
     bgcolor="#ffffff00"

     S [label = "二维金属的等能面\n态密度 原始", shape=hexagon]
     H [label = "二维金属的等能面\n态密度"]
     H -> S [label = "格式转换", dir="back"]
     R [label = "散射中心在原点时的\n实空间态密度"]
     H -> R [label = "动量序对积分"]

     N [label = "散射中心数量"]
     I [label = "散射中心位置"]
     N -> I [label = "抽样"]
     T [label = "扫描隧道显微镜\n读出信号"]
     R -> T [label = "平移叠加"]
     I -> T         
     }
   #+END_SRC

   #+Attr_LaTeX: :height 0.7\textheight
   #+RESULTS:
   [[file:./isoenergy-pipeline.pdf]]
** 二维金属等能面测量的模拟 例子
   #+Attr_LaTeX: :width 0.45\textwidth :center
   [[./fig/scatter-momentum.png]]
   #+Attr_LaTeX: :width 0.45\textwidth :center
   [[./fig/scatter-real.png]]
** 中微子实验光电子读出的模拟
   #+BEGIN_SRC dot :file ./PMT-pipeline.pdf :cmdline -Kdot -Tpdf
     digraph dataset {
     bgcolor="#ffffff00"

     S [label = "光电子到达时间\n振幅、采样通道"]
     T [label = "单光电子响应\n时间曲线"]

     G [label = "光电子总信号"]
     S -> G
     T -> G

     N [label = "白噪声幅度", shape=box]
     W [label = "白噪声"]
     N -> W[label = "抽样"]

     G -> D [label = "相加"]
     W -> D
     
     D [label = "探测器数据"]
     }
   #+END_SRC

   #+Attr_LaTeX: :height 0.7\textheight
   #+RESULTS:
   [[file:./PMT-pipeline.pdf]]
** 分组
   - 同学们先联络好，具体操作在 Github Classroom 上进行
   - 每队至多三人
